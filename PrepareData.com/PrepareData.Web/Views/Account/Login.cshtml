@using Abp.Web.Mvc.Extensions
@using Microsoft.Owin.Security
@model PrepareData.Web.Models.Account.LoginFormViewModel
@section Styles
{
    @Html.IncludeStyle("~/Content/css/login.css")
}
@section Scripts
{
    @Html.IncludeScript("~/Views/Account/Login.js")
    @Html.IncludeScript("~/Scripts/jquery-2.2.0.min.js")
}
@*<div class="container">*@
<div class="top_div"></div>
<div id="LoginArea" class="row">
    <div class="col s12">
        <div class="card z-depth-3">
            <div class="card-title">
                <div class="col s12">
                    <h4 class="">@L("LogIn")</h4>
                </div>
            </div>
            <div class="owl">
                <div class="tou"></div>
                <div class="initial_left_hand" id="left_hand"></div>
                <div class="initial_right_hand" id="right_hand"></div>
            </div>
            <div class="card-content">
                <div class="row">
                    <form id="LoginForm" action="@(Url.Action("Login", "Account"))?returnUrl=@(Model.ReturnUrl)" method="POST">
                        @if (Model.IsMultiTenancyEnabled)
                        {
                            <div class="input-field col s12">
                                <i class="fa fa-smile-o fa-fw prefix fa-lg"></i>
                                <input type="text" class="validate" id="TenancyName" placeholder="@L("TenancyName")">
                                @*<input type="text" class="validate" id="TenancyName" placeholder="@L("TenancyName")" required maxlength="@PrepareData.MultiTenancy.Tenant.MaxTenancyNameLength">*@
                            </div>
                        }
                        else
                        {
                            <input type="hidden" id="TenancyName" value="">
                        }
                        <div class="input-field col s12">
                            <i class="fa fa-user fa-fw prefix fa-lg"></i>
                            <input type="text" class="form-control" id="EmailAddressInput" placeholder="@L("UserNameOrEmail")" >
                            @*<input type="text" class="form-control" id="EmailAddressInput" placeholder="@L("UserNameOrEmail")" required maxlength="@PrepareData.Users.User.MaxEmailAddressLength">*@
                        </div>

                        <div class="input-field col s12">
                            <i class="fa fa-key fa-fw fa-2x prefix"></i>
                            @*<input type="password" class="form-control" id="PasswordInput" placeholder="@L("Password")" required maxlength="@PrepareData.Users.User.MaxPlainPasswordLength">*@
                            <input type="password" class="form-control" id="PasswordInput" placeholder="@L("Password")" >
                        </div>
                        <div class="input-field col s12">
                            <input type="checkbox" id="RememberMeInput">
                            <label for="RememberMeInput">@L("RememberMe")</label>
                        </div>
                        <div class="input-field col s12">
                            <input id="ReturnUrlHash" type="hidden" name="returnUrlHash" />
                        </div>
                        <div class="input-field col s12">
                            <button id="LoginButton" type="submit" class="btn right red lighten-2 waves-effect waves-light"><i class="fa fa-sign-in"></i> @L("LogIn")</button>
                            @*<a class="btn waves-effect waves-light" href="@Url.Action("Register")"><i class="fa  fa-plus"></i> @L("Register")</a>*@
                        </div>
                    </form>
                </div>
            </div>
            @{
                var loginProviders = Context.GetOwinContext().Authentication.GetExternalAuthenticationTypes().ToList();
            }

            @if (loginProviders.Count > 0)
            {
                <p>@L("OrLoginWith"):</p>


                using (Html.BeginForm("ExternalLogin", "Account", method: FormMethod.Post))
                {
                    @Html.AntiForgeryToken()

                    <input type="hidden" name="returnUrl" value="@ViewBag.ReturnUrl" />
                    <input type="hidden" name="provider" value="" />

                    foreach (var provider in loginProviders)
                    {
                        <a class="btn btn-default btn-sm social-login-link" title="@provider.AuthenticationType"
                           data-provider="@provider.AuthenticationType"
                           href="javascript:;">
                            <i class="fa fa-@(provider.AuthenticationType.ToLower())"></i> @provider.AuthenticationType
                        </a>
                    }
                }
            }

        </div>
    </div>
</div>
@* </div>*@